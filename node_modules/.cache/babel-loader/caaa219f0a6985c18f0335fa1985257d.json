{"ast":null,"code":"import _objectSpread from \"/Users/cognizanttechnologysolutions/Downloads/retro-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { split } from \"apollo-link\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { getMainDefinition } from \"apollo-utilities\";\nimport { setContext } from \"apollo-link-context\";\nexport default function useApolloClient(user, room) {\n  var cache = new InMemoryCache();\n\n  var getURI = function getURI(protocol) {\n    return process.env.NODE_ENV === \"production\" ? \"\".concat(protocol, \"s://\").concat(window.location.hostname, \"/graphql\") : \"\".concat(protocol, \"://\").concat(window.location.hostname, \":\").concat(process.env.PORT || 4000, \"/graphql\");\n  };\n\n  var httpLink = new HttpLink({\n    uri: getURI(\"http\")\n  });\n  var websocketLink = new WebSocketLink({\n    uri: getURI(\"ws\"),\n    options: {\n      reconnect: true,\n      connectionParams: {\n        room: room,\n        user: user\n      }\n    }\n  });\n  var link = split( // Split based on operation type\n  function (_ref) {\n    var query = _ref.query;\n    var definition = getMainDefinition(query);\n    return definition.kind === \"OperationDefinition\" && definition.operation === \"subscription\";\n  }, websocketLink, httpLink);\n  var authMiddleware = setContext(function (_, _ref2) {\n    var headers = _ref2.headers;\n    return {\n      headers: _objectSpread(_objectSpread({}, headers), {}, {\n        \"room\": room,\n        \"user\": user\n      })\n    };\n  });\n  var client = new ApolloClient({\n    cache: cache,\n    link: authMiddleware.concat(link)\n  });\n  return client;\n}","map":{"version":3,"sources":["/Users/cognizanttechnologysolutions/Downloads/retro-main/src/useApolloClient.ts"],"names":["ApolloClient","InMemoryCache","split","HttpLink","WebSocketLink","getMainDefinition","setContext","useApolloClient","user","room","cache","getURI","protocol","process","env","NODE_ENV","window","location","hostname","PORT","httpLink","uri","websocketLink","options","reconnect","connectionParams","link","query","definition","kind","operation","authMiddleware","_","headers","client","concat"],"mappings":";AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,KAAT,QAAsB,aAAtB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,SAASC,UAAT,QAA2B,qBAA3B;AAEA,eAAe,SAASC,eAAT,CAAyBC,IAAzB,EAA8CC,IAA9C,EAAmE;AAC9E,MAAMC,KAAK,GAAG,IAAIT,aAAJ,EAAd;;AAEA,MAAMU,MAAM,GAAG,SAATA,MAAS,CAACC,QAAD;AAAA,WAAsBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,aAC5BH,QAD4B,iBACbI,MAAM,CAACC,QAAP,CAAgBC,QADH,0BAE5BN,QAF4B,gBAEdI,MAAM,CAACC,QAAP,CAAgBC,QAFF,cAEcL,OAAO,CAACC,GAAR,CAAYK,IAAZ,IAAoB,IAFlC,aAAtB;AAAA,GAAf;;AAIA,MAAMC,QAAQ,GAAG,IAAIjB,QAAJ,CAAa;AAC1BkB,IAAAA,GAAG,EAAEV,MAAM,CAAC,MAAD;AADe,GAAb,CAAjB;AAIA,MAAMW,aAAa,GAAG,IAAIlB,aAAJ,CAAkB;AACpCiB,IAAAA,GAAG,EAAEV,MAAM,CAAC,IAAD,CADyB;AAEpCY,IAAAA,OAAO,EAAE;AACLC,MAAAA,SAAS,EAAE,IADN;AAELC,MAAAA,gBAAgB,EAAE;AAAEhB,QAAAA,IAAI,EAAJA,IAAF;AAAQD,QAAAA,IAAI,EAAJA;AAAR;AAFb;AAF2B,GAAlB,CAAtB;AAQA,MAAMkB,IAAI,GAAGxB,KAAK,EACd;AACA,kBAAe;AAAA,QAAZyB,KAAY,QAAZA,KAAY;AACX,QAAMC,UAAU,GAAGvB,iBAAiB,CAACsB,KAAD,CAApC;AACA,WACIC,UAAU,CAACC,IAAX,KAAoB,qBAApB,IACAD,UAAU,CAACE,SAAX,KAAyB,cAF7B;AAIH,GARa,EASdR,aATc,EAUdF,QAVc,CAAlB;AAaA,MAAMW,cAAc,GAAGzB,UAAU,CAAC,UAAC0B,CAAD,SAAoB;AAAA,QAAdC,OAAc,SAAdA,OAAc;AAClD,WAAO;AACHA,MAAAA,OAAO,kCACAA,OADA;AAEH,gBAAQxB,IAFL;AAGH,gBAAQD;AAHL;AADJ,KAAP;AAOH,GARgC,CAAjC;AAUA,MAAM0B,MAAM,GAAG,IAAIlC,YAAJ,CAAiB;AAC5BU,IAAAA,KAAK,EAALA,KAD4B;AAE5BgB,IAAAA,IAAI,EAAEK,cAAc,CAACI,MAAf,CAAsBT,IAAtB;AAFsB,GAAjB,CAAf;AAKA,SAAOQ,MAAP;AACH","sourcesContent":["import { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { split } from \"apollo-link\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { getMainDefinition } from \"apollo-utilities\";\nimport { setContext } from \"apollo-link-context\";\n\nexport default function useApolloClient(user: string | null, room: string | null) {\n    const cache = new InMemoryCache();\n\n    const getURI = (protocol: string) => process.env.NODE_ENV === \"production\"\n        ? `${protocol}s://${window.location.hostname}/graphql`\n        : `${protocol}://${window.location.hostname}:${process.env.PORT || 4000}/graphql`;\n\n    const httpLink = new HttpLink({\n        uri: getURI(\"http\")\n    });\n\n    const websocketLink = new WebSocketLink({\n        uri: getURI(\"ws\"),\n        options: {\n            reconnect: true,\n            connectionParams: { room, user }\n        }\n    });\n\n    const link = split(\n        // Split based on operation type\n        ({ query }) => {\n            const definition = getMainDefinition(query);\n            return (\n                definition.kind === \"OperationDefinition\" &&\n                definition.operation === \"subscription\"\n            );\n        },\n        websocketLink,\n        httpLink,\n    );\n\n    const authMiddleware = setContext((_, { headers }) => {\n        return {\n            headers: {\n                ...headers,\n                \"room\": room,\n                \"user\": user\n            }\n        }\n    });\n\n    const client = new ApolloClient({\n        cache,\n        link: authMiddleware.concat(link)\n    });\n\n    return client;\n}\n"]},"metadata":{},"sourceType":"module"}