{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/cognizanttechnologysolutions/Downloads/retro-main/src/_lib/Textarea.tsx\";\n\nimport * as React from \"react\";\nimport autosize from \"autosize\";\nimport \"./Textarea.css\";\n\n/**\n * Note that this Textarea component is _fully controlled_, meaning\n * that we don't do any handling of the inserted data at this\n * level, and we expect that the parent takes care of it all\n */\nvar Textarea = React.forwardRef(function (props, ref) {\n  var handleBlur = props.handleBlur,\n      handleChange = props.handleChange,\n      handleFocus = props.handleFocus,\n      header = props.header,\n      placeholder = props.placeholder,\n      submit = props.submit,\n      _props$submitOnEnter = props.submitOnEnter,\n      submitOnEnter = _props$submitOnEnter === void 0 ? true : _props$submitOnEnter,\n      value = props.value;\n  var textareaRef = React.useRef(null);\n  React.useEffect(function () {\n    if (typeof ref === \"function\") {\n      ref(textareaRef.current);\n    } else if (ref) {\n      ref.current = textareaRef.current;\n    }\n  }, [textareaRef]);\n\n  var submitOrEscape = function submitOrEscape(ev) {\n    if (textareaRef.current && textareaRef.current === document.activeElement) {\n      if (ev.key === \"Enter\" && !ev.shiftKey && submitOnEnter) {\n        textareaRef.current.blur();\n        submit && submit();\n      }\n\n      if (ev.key === \"Escape\" || ev.key === \"Esc\") {\n        textareaRef.current.blur();\n      }\n    }\n  };\n\n  React.useEffect(function () {\n    document.addEventListener('keydown', submitOrEscape);\n    return function () {\n      document.removeEventListener('keydown', submitOrEscape);\n    };\n  });\n  React.useLayoutEffect(function () {\n    if (textareaRef.current) {\n      autosize(textareaRef.current);\n    }\n  }, []);\n  React.useEffect(function () {\n    if (!value || value.length === 0) {\n      autosize.update(textareaRef.current);\n    }\n  }, [value]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input textarea\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, header && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-header\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  }, header), /*#__PURE__*/React.createElement(\"textarea\", {\n    ref: textareaRef,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    placeholder: placeholder,\n    value: value,\n    rows: 1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }));\n});\nexport default Textarea;","map":{"version":3,"sources":["/Users/cognizanttechnologysolutions/Downloads/retro-main/src/_lib/Textarea.tsx"],"names":["React","autosize","Textarea","forwardRef","props","ref","handleBlur","handleChange","handleFocus","header","placeholder","submit","submitOnEnter","value","textareaRef","useRef","useEffect","current","submitOrEscape","ev","document","activeElement","key","shiftKey","blur","addEventListener","removeEventListener","useLayoutEffect","length","update"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport autosize from \"autosize\";\n\nimport \"./Textarea.css\";\nimport { subscribe } from \"graphql\";\n\ntype TextareaProps = {\n    handleChange: (ev: React.ChangeEvent<HTMLTextAreaElement>) => void\n    value: string\n    submit?: () => void\n    submitOnEnter?: boolean\n    handleBlur?: (ev: React.FocusEvent<HTMLTextAreaElement>) => void\n    handleFocus?: (ev: React.FocusEvent<HTMLTextAreaElement>) => void\n    hasFocus?: boolean\n    header?: string\n    placeholder?: string\n};\n\n/**\n * Note that this Textarea component is _fully controlled_, meaning\n * that we don't do any handling of the inserted data at this\n * level, and we expect that the parent takes care of it all\n */\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>((props: TextareaProps, ref) => {\n    const {\n        handleBlur, handleChange, handleFocus, header, placeholder, submit, submitOnEnter = true, value\n    } = props;\n\n    const textareaRef = React.useRef<HTMLTextAreaElement | null>(null);\n\n    React.useEffect(() => {\n        if (typeof ref === \"function\") {\n            ref(textareaRef.current);\n        } else if (ref) {\n            ref.current = textareaRef.current;\n        }\n    }, [textareaRef]);\n\n    const submitOrEscape = (ev: KeyboardEvent) => {\n        if (textareaRef.current && textareaRef.current === document.activeElement) {\n            if (ev.key === \"Enter\" && !ev.shiftKey && submitOnEnter) {\n                textareaRef.current.blur();\n                submit && submit();\n            }\n            if (ev.key === \"Escape\" || ev.key === \"Esc\") {\n                textareaRef.current.blur();\n            }\n        }\n    };\n\n    React.useEffect(() => {\n        document.addEventListener('keydown', submitOrEscape);\n        return () => {\n            document.removeEventListener('keydown', submitOrEscape);\n        };\n    });\n\n    React.useLayoutEffect(() => {\n        if (textareaRef.current) {\n            autosize(textareaRef.current as any);\n        }\n    }, []);\n\n    React.useEffect(() => {\n        if (!value || value.length === 0) {\n            autosize.update(textareaRef.current as any);\n        }\n    }, [value]);\n\n    return (\n        <div className=\"input textarea\">\n            {header && (\n                <div className=\"input-header\">\n                    {header}\n                </div>\n            )}\n            <textarea\n                ref={textareaRef}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n                placeholder={placeholder}\n                value={value}\n                rows={1}\n            />\n        </div>\n    );\n});\n\nexport default Textarea;\n"]},"metadata":{},"sourceType":"module"}