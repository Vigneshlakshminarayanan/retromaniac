{"ast":null,"code":"var _jsxFileName = \"/Users/cognizanttechnologysolutions/Downloads/retro-main/src/Footer/ShareLink.tsx\";\nimport * as React from \"react\";\nimport Icon from \"../_lib/Icon\";\nimport { Popover, PopoverTrigger, PopoverContent, PopoverArrow, PopoverCloseButton, PopoverHeader, PopoverBody, useClipboard } from \"@chakra-ui/core\";\nimport Button, { ButtonType } from \"../_lib/Button\";\nimport Tooltip from \"../_lib/Tooltip\";\nexport default function ShareLink() {\n  var inputRef = React.useRef(null);\n\n  var _useClipboard = useClipboard(window.location),\n      onCopy = _useClipboard.onCopy,\n      hasCopied = _useClipboard.hasCopied;\n\n  React.useEffect(function () {\n    if (hasCopied && inputRef.current) {\n      inputRef.current.select();\n    }\n  }, [hasCopied]);\n  return /*#__PURE__*/React.createElement(Popover, {\n    placement: \"top-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PopoverTrigger, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button circle large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Tooltip, {\n    label: \"Share\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: onCopy,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    name: \"link\",\n    size: 17,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 29\n    }\n  }))))), /*#__PURE__*/React.createElement(PopoverContent, {\n    width: \"auto\",\n    maxWidth: \"none\",\n    backgroundColor: \"var(--secondary-color)\",\n    boxShadow: \"var(--default-box-shadow)\",\n    padding: \"8px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(PopoverArrow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(PopoverCloseButton, {\n    border: \"none\",\n    background: \"transparent\",\n    color: \"var(--accent-color)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(PopoverHeader, {\n    fontSize: 13,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      paddingRight: 30\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }\n  }, \"The link to the room was copied to your clipboard.\")), /*#__PURE__*/React.createElement(PopoverBody, {\n    paddingTop: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      alignItems: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input\",\n    style: {\n      padding: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    ref: inputRef,\n    value: window.location.toString(),\n    style: {\n      fontSize: 13,\n      color: 'hsla(0, 0%, 100%, 0.5)'\n    },\n    readOnly: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    type: ButtonType.Circular,\n    tooltip: \"Copy to clipboard\",\n    handleClick: function handleClick() {\n      return onCopy && onCopy();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    name: \"clipboard\",\n    size: 14,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 29\n    }\n  }))))));\n}\n;","map":{"version":3,"sources":["/Users/cognizanttechnologysolutions/Downloads/retro-main/src/Footer/ShareLink.tsx"],"names":["React","Icon","Popover","PopoverTrigger","PopoverContent","PopoverArrow","PopoverCloseButton","PopoverHeader","PopoverBody","useClipboard","Button","ButtonType","Tooltip","ShareLink","inputRef","useRef","window","location","onCopy","hasCopied","useEffect","current","select","paddingRight","display","alignItems","padding","toString","fontSize","color","Circular"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport Icon from \"../_lib/Icon\";\nimport {\n    Popover, PopoverTrigger, PopoverContent, PopoverArrow, PopoverCloseButton, PopoverHeader, PopoverBody, useClipboard\n} from \"@chakra-ui/core\";\nimport Button, { ButtonType } from \"../_lib/Button\";\nimport Tooltip from \"../_lib/Tooltip\";\n\nexport default function ShareLink() {\n    const inputRef = React.useRef<HTMLInputElement | null>(null);\n    const { onCopy, hasCopied } = useClipboard(window.location);\n\n    React.useEffect(() => {\n        if (hasCopied && inputRef.current)Â {\n            inputRef.current.select();\n        }\n    }, [hasCopied]);\n\n    return (\n        <Popover placement=\"top-end\">\n            <PopoverTrigger>\n                <div className=\"button circle large\">\n                    <Tooltip label=\"Share\">\n                        <button onClick={onCopy}>\n                            <Icon name=\"link\" size={17} />\n                        </button>\n                    </Tooltip>\n                </div>\n            </PopoverTrigger>\n            <PopoverContent\n                width=\"auto\"\n                maxWidth=\"none\"\n                backgroundColor=\"var(--secondary-color)\"\n                boxShadow=\"var(--default-box-shadow)\"\n                padding=\"8px\"\n            >\n                <PopoverArrow />\n                <PopoverCloseButton\n                    border=\"none\"\n                    background=\"transparent\"\n                    color=\"var(--accent-color)\"\n                />\n                <PopoverHeader fontSize={13}>\n                    <div style={{ paddingRight: 30 }}>\n                        The link to the room was copied to your clipboard.\n                    </div>\n                </PopoverHeader>\n                <PopoverBody paddingTop={0}>\n                    <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                        <div className=\"input\" style={{ padding: 0 }}>\n                            <input\n                                ref={inputRef}\n                                value={window.location.toString()}\n                                style={{ fontSize: 13, color: 'hsla(0, 0%, 100%, 0.5)' }}\n                                readOnly\n                            />\n                        </div>\n                        <Button type={ButtonType.Circular} tooltip=\"Copy to clipboard\" handleClick={() =>Â onCopy && onCopy()}>\n                            <Icon name=\"clipboard\" size={14} />\n                        </Button>\n                    </div>\n                </PopoverBody>\n            </PopoverContent>\n        </Popover>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}