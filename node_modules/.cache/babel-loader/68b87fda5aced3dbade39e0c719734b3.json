{"ast":null,"code":"import _slicedToArray from \"/Users/cognizanttechnologysolutions/Downloads/retro-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/cognizanttechnologysolutions/Downloads/retro-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _templateObject,\n    _templateObject2,\n    _jsxFileName = \"/Users/cognizanttechnologysolutions/Downloads/retro-main/src/Room/ColumnCard.tsx\";\n\nimport * as React from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { useSubscription, useMutation } from \"@apollo/react-hooks\";\nimport { Context } from \"../Context\";\nimport Icon from \"../_lib/Icon\";\nimport \"./ColumnCard.css\";\nvar CARD_UPDATED_SUBSCRIPTION = gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n    subscription onCardUpdated($id: String!) {\\n        cardUpdated(id: $id) {\\n            content\\n        }\\n    }\\n\"])));\nvar DELETE_CARD_MUTATION = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n    mutation DeleteCard($id: String!) {\\n        deleteCard(id: $id)\\n    }\\n\"])));\nexport default function ColumnCard(_ref) {\n  var _data$cardUpdated$con;\n\n  var id = _ref.id,\n      userId = _ref.userId,\n      type = _ref.type,\n      _ref$initialText = _ref.initialText,\n      initialText = _ref$initialText === void 0 ? '' : _ref$initialText;\n\n  // We get the current user ID from our context. We will use that\n  // to blur cards that don't belong to the current user\n  var _React$useContext = React.useContext(Context),\n      user = _React$useContext.user,\n      currentStep = _React$useContext.currentStep;\n\n  var belongsToUser = React.useMemo(function () {\n    return !userId || userId === (user === null || user === void 0 ? void 0 : user.id);\n  }, [userId, user]); // We also need the current step, in order to know whether\n  // we're ready to reveal the cards to all users\n\n  var blurred = currentStep < 2; // Everytime we get an update for this card in particular, we\n  // will update this state. Note from the subscription that we're\n  // sending the ID of the card as a variable; that is because we\n  // will filter on the server to make sure that we're only notified\n  // for updates on _this_ card\n\n  var _React$useState = React.useState(initialText),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      text = _React$useState2[0],\n      setText = _React$useState2[1]; // Here we subscribe to updates on the card\n\n\n  var _useSubscription = useSubscription(CARD_UPDATED_SUBSCRIPTION, {\n    variables: {\n      id: id\n    }\n  }),\n      data = _useSubscription.data;\n\n  var _useMutation = useMutation(DELETE_CARD_MUTATION, {\n    variables: {\n      id: id\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      deleteCard = _useMutation2[0];\n\n  React.useEffect(function () {\n    if (data) {\n      setText(data.cardUpdated.content);\n    }\n  }, [data]);\n\n  if (initialText.length === 0 && (!data || data && !((_data$cardUpdated$con = data.cardUpdated.content) === null || _data$cardUpdated$con === void 0 ? void 0 : _data$cardUpdated$con.length))) {\n    return null;\n  }\n\n  var shuffledText = belongsToUser ? text : Array.from(text).map(function (char) {\n    return [' ', '.', '!'].includes(char) ? char : String.fromCharCode(char.charCodeAt(0) + 2);\n  }).join('');\n  return /*#__PURE__*/React.createElement(\"div\", {\n    key: id,\n    className: \"card\".concat(!belongsToUser && blurred ? ' blurry' : ''),\n    style: {\n      width: \"95%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, belongsToUser && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"card-delete\",\n    style: {\n      backgroundColor: \"transparent\",\n      border: \"none\"\n    },\n    onClick: function onClick() {\n      return deleteCard();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    name: \"trash\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tag\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, type), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      paddingTop: 10,\n      wordBreak: \"break-word\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, blurred ? shuffledText : text));\n}","map":{"version":3,"sources":["/Users/cognizanttechnologysolutions/Downloads/retro-main/src/Room/ColumnCard.tsx"],"names":["React","gql","useSubscription","useMutation","Context","Icon","CARD_UPDATED_SUBSCRIPTION","DELETE_CARD_MUTATION","ColumnCard","id","userId","type","initialText","useContext","user","currentStep","belongsToUser","useMemo","blurred","useState","text","setText","variables","data","deleteCard","useEffect","cardUpdated","content","length","shuffledText","Array","from","map","char","includes","String","fromCharCode","charCodeAt","join","width","backgroundColor","border","paddingTop","wordBreak"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { useSubscription, useMutation } from \"@apollo/react-hooks\";\nimport { Context } from \"../Context\";\nimport Icon from \"../_lib/Icon\";\n\nimport \"./ColumnCard.css\";\n\ntype CardProps = {\n    id: string\n    type: string\n    userId?: string\n    initialText?: string\n};\n\nconst CARD_UPDATED_SUBSCRIPTION = gql`\n    subscription onCardUpdated($id: String!) {\n        cardUpdated(id: $id) {\n            content\n        }\n    }\n`;\n\nconst DELETE_CARD_MUTATION = gql`\n    mutation DeleteCard($id: String!) {\n        deleteCard(id: $id)\n    }\n`;\n\nexport default function ColumnCard({ id, userId, type, initialText = '' }: CardProps) {\n    // We get the current user ID from our context. We will use that\n    // to blur cards that don't belong to the current user\n    const { user, currentStep } = React.useContext(Context);\n    const belongsToUser = React.useMemo(() => !userId || userId === user?.id, [userId, user]);\n\n    // We also need the current step, in order to know whether\n    // we're ready to reveal the cards to all users\n    const blurred = currentStep < 2;\n\n    // Everytime we get an update for this card in particular, we\n    // will update this state. Note from the subscription that we're\n    // sending the ID of the card as a variable; that is because we\n    // will filter on the server to make sure that we're only notified\n    // for updates on _this_ card\n    const [text, setText] = React.useState(initialText);\n\n    // Here we subscribe to updates on the card\n    const { data } = useSubscription(CARD_UPDATED_SUBSCRIPTION, { variables: { id } });\n\n    const [deleteCard] = useMutation(DELETE_CARD_MUTATION, { variables: { id } });\n\n    React.useEffect(() =>Â {\n        if (data) {\n            setText(data.cardUpdated.content);\n        }\n    }, [data]);\n\n    if (initialText.length === 0 && (!data || (data && !data.cardUpdated.content?.length))) {\n        return null;\n    }\n\n    const shuffledText = belongsToUser\n        ? text\n        : (\n            Array.from(text).map(char => (\n                [' ', '.', '!'].includes(char) ? char : String.fromCharCode(char.charCodeAt(0) + 2)\n            )).join('')\n        );\n\n    return (\n        <div key={id} className={`card${!belongsToUser && blurred ? ' blurry' : ''}`} style={{ width: \"95%\" }}>\n            {belongsToUser && (\n                <button className=\"card-delete\" style={{ backgroundColor: \"transparent\", border: \"none\" }} onClick={() => deleteCard()}>\n                    <Icon name=\"trash\" />\n                </button>\n            )}\n            <div className=\"tag\">{type}</div>\n            <div style={{ paddingTop: 10, wordBreak: \"break-word\" }}>{blurred ? shuffledText : text}</div>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}