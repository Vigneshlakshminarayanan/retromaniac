{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/cognizanttechnologysolutions/Downloads/retro-main/src/_lib/Button.tsx\";\n\nimport * as React from \"react\";\nimport Tooltip from \"./Tooltip\";\nimport \"./Button.css\";\nexport var ButtonType;\n\n(function (ButtonType) {\n  ButtonType[ButtonType[\"Normal\"] = 0] = \"Normal\";\n  ButtonType[ButtonType[\"Small\"] = 1] = \"Small\";\n  ButtonType[ButtonType[\"Circular\"] = 2] = \"Circular\";\n  ButtonType[ButtonType[\"CircularLarge\"] = 3] = \"CircularLarge\";\n  ButtonType[ButtonType[\"CircularLargeEmpty\"] = 4] = \"CircularLargeEmpty\";\n})(ButtonType || (ButtonType = {}));\n\n;\n\nvar Button = function Button(_ref) {\n  var handleClick = _ref.handleClick,\n      tooltip = _ref.tooltip,\n      type = _ref.type,\n      children = _ref.children;\n  var classNames = [\"button\", type === ButtonType.Small && \"min\", type === ButtonType.Circular && \"circle\", type === ButtonType.CircularLarge && \"circle large\", type === ButtonType.CircularLargeEmpty && \"circle large empty\"].filter(Boolean);\n  var button = /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames.join(\" \"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleClick,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }, children));\n  return tooltip ? /*#__PURE__*/React.createElement(Tooltip, {\n    label: tooltip,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, button) : button;\n};\n\nButton.defaultProps = {\n  type: ButtonType.Normal\n};\nexport default Button;","map":{"version":3,"sources":["/Users/cognizanttechnologysolutions/Downloads/retro-main/src/_lib/Button.tsx"],"names":["React","Tooltip","ButtonType","Button","handleClick","tooltip","type","children","classNames","Small","Circular","CircularLarge","CircularLargeEmpty","filter","Boolean","button","join","defaultProps","Normal"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,OAAO,cAAP;AAEA,WAAYC,UAAZ;;WAAYA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;GAAAA,U,KAAAA,U;;AAMX;;AASD,IAAMC,MAAM,GAAG,SAATA,MAAS,OAA2D;AAAA,MAAxDC,WAAwD,QAAxDA,WAAwD;AAAA,MAA3CC,OAA2C,QAA3CA,OAA2C;AAAA,MAAlCC,IAAkC,QAAlCA,IAAkC;AAAA,MAA5BC,QAA4B,QAA5BA,QAA4B;AACtE,MAAMC,UAAU,GAAG,CACf,QADe,EAEfF,IAAI,KAAKJ,UAAU,CAACO,KAApB,IAA6B,KAFd,EAGfH,IAAI,KAAKJ,UAAU,CAACQ,QAApB,IAAgC,QAHjB,EAIfJ,IAAI,KAAKJ,UAAU,CAACS,aAApB,IAAqC,cAJtB,EAKfL,IAAI,KAAKJ,UAAU,CAACU,kBAApB,IAA0C,oBAL3B,EAMjBC,MANiB,CAMVC,OANU,CAAnB;AAQA,MAAMC,MAAM,gBACR;AAAK,IAAA,SAAS,EAAEP,UAAU,CAACQ,IAAX,CAAgB,GAAhB,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAQ,IAAA,OAAO,EAAEZ,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKG,QADL,CADJ,CADJ;AAQA,SAAOF,OAAO,gBACV,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAEA,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKU,MADL,CADU,GAIVA,MAJJ;AAKH,CAtBD;;AAwBAZ,MAAM,CAACc,YAAP,GAAsB;AAClBX,EAAAA,IAAI,EAAEJ,UAAU,CAACgB;AADC,CAAtB;AAIA,eAAef,MAAf","sourcesContent":["import * as React from \"react\";\nimport Tooltip from \"./Tooltip\";\n\nimport \"./Button.css\";\n\nexport enum ButtonType {\n    Normal,\n    Small,\n    Circular,\n    CircularLarge,\n    CircularLargeEmpty\n};\n\ntype ButtonProps = {\n    handleClick: (ev?: React.MouseEvent<HTMLButtonElement>) => void\n    children: React.ReactNode\n    tooltip?: string\n    type?: ButtonType\n};\n\nconst Button = ({ handleClick, tooltip, type, children }: ButtonProps) => {\n    const classNames = [\n        \"button\",\n        type === ButtonType.Small && \"min\",\n        type === ButtonType.Circular && \"circle\",\n        type === ButtonType.CircularLarge && \"circle large\",\n        type === ButtonType.CircularLargeEmpty && \"circle large empty\"\n    ].filter(Boolean);\n\n    const button = (\n        <div className={classNames.join(\" \")}>\n            <button onClick={handleClick}>\n                {children}\n            </button>\n        </div>\n    );\n\n    return tooltip ? (\n        <Tooltip label={tooltip}>\n            {button}\n        </Tooltip>\n    ) : button;\n};\n\nButton.defaultProps = {\n    type: ButtonType.Normal\n};\n\nexport default Button;\n"]},"metadata":{},"sourceType":"module"}