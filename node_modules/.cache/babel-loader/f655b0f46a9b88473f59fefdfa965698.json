{"ast":null,"code":"import _slicedToArray from \"/Users/cognizanttechnologysolutions/Downloads/retro-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/cognizanttechnologysolutions/Downloads/retro-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _templateObject, _templateObject2;\n\nimport * as React from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { useMutation } from \"@apollo/react-hooks\";\nvar ADD_CARD = gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n    mutation AddCard($type: String!) {\\n        addCard(type: $type) {\\n            id\\n        }\\n    }\\n\"])));\nvar UPDATE_CARD = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n    mutation UpdateCard($id: String!, $content: String!) {\\n        updateCard(id: $id, content: $content) {\\n            id\\n        }\\n    }\\n\"])));\nexport default function useCardMutations(type) {\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      newCard = _React$useState2[0],\n      setNewCard = _React$useState2[1];\n\n  var _useMutation = useMutation(ADD_CARD),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      addCard = _useMutation2[0],\n      data = _useMutation2[1].data;\n\n  var _useMutation3 = useMutation(UPDATE_CARD),\n      _useMutation4 = _slicedToArray(_useMutation3, 1),\n      updateCard = _useMutation4[0];\n\n  React.useEffect(function () {\n    if (data) {\n      setNewCard({\n        id: data.addCard.id\n      });\n    }\n  }, [data]);\n\n  var createCard = function createCard() {\n    if (!newCard) {\n      addCard({\n        variables: {\n          type: type\n        }\n      });\n    }\n  };\n\n  var editCard = function editCard(input) {\n    if (newCard) {\n      var card = {\n        id: newCard.id,\n        content: typeof input === \"string\" ? input : input.target.value\n      };\n      setNewCard(card);\n      updateCard({\n        variables: {\n          id: card.id,\n          content: card.content\n        }\n      });\n    }\n  };\n\n  var reset = function reset() {\n    return setNewCard(null);\n  };\n\n  return {\n    newCard: newCard,\n    createCard: createCard,\n    editCard: editCard,\n    reset: reset\n  };\n}","map":{"version":3,"sources":["/Users/cognizanttechnologysolutions/Downloads/retro-main/src/Room/useCardMutations.tsx"],"names":["React","gql","useMutation","ADD_CARD","UPDATE_CARD","useCardMutations","type","useState","newCard","setNewCard","addCard","data","updateCard","useEffect","id","createCard","variables","editCard","input","card","content","target","value","reset"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AAUA,IAAMC,QAAQ,GAAGF,GAAH,iLAAd;AAQA,IAAMG,WAAW,GAAGH,GAAH,yNAAjB;AAQA,eAAe,SAASI,gBAAT,CAA0BC,IAA1B,EAA0D;AACrE,wBAA8BN,KAAK,CAACO,QAAN,CAAgC,IAAhC,CAA9B;AAAA;AAAA,MAAOC,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,qBAA4BP,WAAW,CAACC,QAAD,CAAvC;AAAA;AAAA,MAAOO,OAAP;AAAA,MAAkBC,IAAlB,oBAAkBA,IAAlB;;AACA,sBAAqBT,WAAW,CAACE,WAAD,CAAhC;AAAA;AAAA,MAAOQ,UAAP;;AAEAZ,EAAAA,KAAK,CAACa,SAAN,CAAgB,YAAM;AAClB,QAAIF,IAAJ,EAAU;AACNF,MAAAA,UAAU,CAAC;AAAEK,QAAAA,EAAE,EAAEH,IAAI,CAACD,OAAL,CAAaI;AAAnB,OAAD,CAAV;AACH;AACJ,GAJD,EAIG,CAACH,IAAD,CAJH;;AAMA,MAAMI,UAAU,GAAG,SAAbA,UAAa,GAAM;AACrB,QAAI,CAACP,OAAL,EAAc;AACVE,MAAAA,OAAO,CAAC;AAAEM,QAAAA,SAAS,EAAE;AAAEV,UAAAA,IAAI,EAAJA;AAAF;AAAb,OAAD,CAAP;AACH;AACJ,GAJD;;AAMA,MAAMW,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAA+E;AAC5F,QAAIV,OAAJ,EAAa;AACT,UAAMW,IAAI,GAAG;AAAEL,QAAAA,EAAE,EAAEN,OAAO,CAACM,EAAd;AAAkBM,QAAAA,OAAO,EAAE,OAAOF,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCA,KAAK,CAACG,MAAN,CAAaC;AAA5E,OAAb;AACAb,MAAAA,UAAU,CAACU,IAAD,CAAV;AACAP,MAAAA,UAAU,CAAC;AAAEI,QAAAA,SAAS,EAAE;AAAEF,UAAAA,EAAE,EAAEK,IAAI,CAACL,EAAX;AAAeM,UAAAA,OAAO,EAAED,IAAI,CAACC;AAA7B;AAAb,OAAD,CAAV;AACH;AACJ,GAND;;AAQA,MAAMG,KAAK,GAAG,SAARA,KAAQ;AAAA,WAAMd,UAAU,CAAC,IAAD,CAAhB;AAAA,GAAd;;AAEA,SAAO;AACHD,IAAAA,OAAO,EAAPA,OADG;AAEHO,IAAAA,UAAU,EAAVA,UAFG;AAGHE,IAAAA,QAAQ,EAARA,QAHG;AAIHM,IAAAA,KAAK,EAALA;AAJG,GAAP;AAMH","sourcesContent":["import * as React from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport CardType from \"./CardType\";\n\ntype UseCardMutations = {\n    newCard: CardType | null\n    createCard: () => void\n    editCard: (ev: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement> | string) => void\n    reset: () => void\n};\n\nconst ADD_CARD = gql`\n    mutation AddCard($type: String!) {\n        addCard(type: $type) {\n            id\n        }\n    }\n`;\n\nconst UPDATE_CARD = gql`\n    mutation UpdateCard($id: String!, $content: String!) {\n        updateCard(id: $id, content: $content) {\n            id\n        }\n    }\n`;\n\nexport default function useCardMutations(type: string): UseCardMutations {\n    const [newCard, setNewCard] = React.useState<CardType | null>(null);\n\n    const [addCard, { data }] = useMutation(ADD_CARD);\n    const [updateCard] = useMutation(UPDATE_CARD);\n\n    React.useEffect(() => {\n        if (data) {\n            setNewCard({ id: data.addCard.id });\n        }\n    }, [data]);\n\n    const createCard = () => {\n        if (!newCard) {\n            addCard({ variables: { type }});\n        }\n    };\n\n    const editCard = (input: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement> | string) => {\n        if (newCard) {\n            const card = { id: newCard.id, content: typeof input === \"string\" ? input : input.target.value };\n            setNewCard(card);\n            updateCard({ variables: { id: card.id, content: card.content } });\n        }\n    };\n\n    const reset = () => setNewCard(null);\n\n    return {\n        newCard,\n        createCard,\n        editCard,\n        reset \n    };\n}"]},"metadata":{},"sourceType":"module"}