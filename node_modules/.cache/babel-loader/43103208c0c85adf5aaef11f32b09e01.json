{"ast":null,"code":"import _toConsumableArray from \"/Users/cognizanttechnologysolutions/Downloads/retro-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/cognizanttechnologysolutions/Downloads/retro-main/src/Room/Column.tsx\";\nimport * as React from \"react\";\nimport { Context } from \"../Context\";\nimport ColumnCard from \"./ColumnCard\";\nimport ColumnInput from \"./ColumnInput\";\nimport Steps from \"../Steps\";\nimport useCardsList from \"./useCardsList\";\nimport \"./Column.css\";\nexport default function Column(_ref) {\n  var _this = this;\n\n  var category = _ref.category;\n\n  // This takes care of fetching all cards when mounting +\n  // subscribing to card events based on the category. Note\n  // that this does _not_ take care of updates; only adding\n  // or removing cards. Each card is responsible for its own\n  // updates subscription (see `ColumnCard.tsx`)\n  var _useCardsList = useCardsList(category),\n      cards = _useCardsList.cards,\n      setCards = _useCardsList.setCards,\n      refetch = _useCardsList.refetch; // When we reveal the cards, we'll fetch them again that all\n  // users see their cards in the same order. That's why we\n  // need the currentStep\n\n\n  var _React$useContext = React.useContext(Context),\n      currentStep = _React$useContext.currentStep;\n\n  React.useEffect(function () {\n    if (currentStep === Steps.REVEAL) {\n      refetch();\n    }\n  }, [currentStep, refetch]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"column \".concat(category.toLowerCase()),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ColumnInput, {\n    submitCard: function submitCard(card) {\n      return setCards([card].concat(_toConsumableArray(cards || [])));\n    },\n    type: category,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }), (cards || []).map(function (card) {\n    return /*#__PURE__*/React.createElement(ColumnCard, {\n      key: card.id,\n      id: card.id,\n      userId: card.userId,\n      type: category,\n      initialText: card.content || '',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }\n    });\n  }));\n}","map":{"version":3,"sources":["/Users/cognizanttechnologysolutions/Downloads/retro-main/src/Room/Column.tsx"],"names":["React","Context","ColumnCard","ColumnInput","Steps","useCardsList","Column","category","cards","setCards","refetch","useContext","currentStep","useEffect","REVEAL","toLowerCase","card","map","id","userId","content"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,OAAO,cAAP;AAOA,eAAe,SAASC,MAAT,OAA2C;AAAA;;AAAA,MAAzBC,QAAyB,QAAzBA,QAAyB;;AACtD;AACA;AACA;AACA;AACA;AACA,sBAAqCF,YAAY,CAACE,QAAD,CAAjD;AAAA,MAAQC,KAAR,iBAAQA,KAAR;AAAA,MAAeC,QAAf,iBAAeA,QAAf;AAAA,MAAyBC,OAAzB,iBAAyBA,OAAzB,CANsD,CAQtD;AACA;AACA;;;AACA,0BAAwBV,KAAK,CAACW,UAAN,CAAiBV,OAAjB,CAAxB;AAAA,MAAQW,WAAR,qBAAQA,WAAR;;AAEAZ,EAAAA,KAAK,CAACa,SAAN,CAAgB,YAAM;AAClB,QAAID,WAAW,KAAKR,KAAK,CAACU,MAA1B,EAAkC;AAC9BJ,MAAAA,OAAO;AACV;AACJ,GAJD,EAIG,CAACE,WAAD,EAAcF,OAAd,CAJH;AAMA,sBACI;AAAK,IAAA,SAAS,mBAAYH,QAAQ,CAACQ,WAAT,EAAZ,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,WAAD;AACI,IAAA,UAAU,EAAE,oBAAAC,IAAI;AAAA,aAAIP,QAAQ,EAAEO,IAAF,4BAAYR,KAAK,IAAI,EAArB,GAAZ;AAAA,KADpB;AAEI,IAAA,IAAI,EAAED,QAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAKK,CAACC,KAAK,IAAI,EAAV,EAAcS,GAAd,CAAkB,UAAAD,IAAI;AAAA,wBACnB,oBAAC,UAAD;AACI,MAAA,GAAG,EAAEA,IAAI,CAACE,EADd;AAEI,MAAA,EAAE,EAAEF,IAAI,CAACE,EAFb;AAGI,MAAA,MAAM,EAAEF,IAAI,CAACG,MAHjB;AAII,MAAA,IAAI,EAAEZ,QAJV;AAKI,MAAA,WAAW,EAAES,IAAI,CAACI,OAAL,IAAgB,EALjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADmB;AAAA,GAAtB,CALL,CADJ;AAiBH","sourcesContent":["import * as React from \"react\";\nimport { Context } from \"../Context\";\nimport ColumnCard from \"./ColumnCard\";\nimport ColumnInput from \"./ColumnInput\";\nimport Steps from \"../Steps\";\nimport useCardsList from \"./useCardsList\";\n\nimport \"./Column.css\";\n\ntype ColumnProps = {\n    category: string\n};\n\n\nexport default function Column({ category }: ColumnProps) {\n    // This takes care of fetching all cards when mounting +\n    // subscribing to card events based on the category. Note\n    // that this does _not_ take care of updates; only adding\n    // or removing cards. Each card is responsible for its own\n    // updates subscription (see `ColumnCard.tsx`)\n    const { cards, setCards, refetch } = useCardsList(category);\n\n    // When we reveal the cards, we'll fetch them again that all\n    // users see their cards in the same order. That's why we\n    // need the currentStep\n    const { currentStep } = React.useContext(Context);\n\n    React.useEffect(() => {\n        if (currentStep === Steps.REVEAL) {\n            refetch();\n        }\n    }, [currentStep, refetch]);\n\n    return (\n        <div className={`column ${category.toLowerCase()}`}>\n            <ColumnInput\n                submitCard={card => setCards([card, ...(cards || [])])}\n                type={category}\n            />\n            {(cards || []).map(card => (\n                <ColumnCard\n                    key={card.id}\n                    id={card.id}\n                    userId={card.userId}\n                    type={category}\n                    initialText={card.content || ''}\n                />\n            ))}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}