{"ast":null,"code":"import _slicedToArray from \"/Users/cognizanttechnologysolutions/Downloads/retro-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/cognizanttechnologysolutions/Downloads/retro-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _templateObject,\n    _jsxFileName = \"/Users/cognizanttechnologysolutions/Downloads/retro-main/src/Room/Notes/Notes.tsx\";\n\nimport * as React from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { Context } from \"../../Context\";\nimport { UserRole } from \"../../UserType\";\nimport { useSubscription } from \"@apollo/react-hooks\";\nimport useCardMutations from \"../useCardMutations\";\nimport useCardsList from \"../useCardsList\";\nimport Card from \"../../_lib/Card\";\nimport Textarea from \"../../_lib/Textarea\";\nimport Steps from \"../../Steps\";\nimport \"./Notes.css\";\nvar NOTE_UPDATED_SUBSCRIPTION = gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n    subscription onCardUpdated($id: String!) {\\n        cardUpdated(id: $id) {\\n            content\\n        }\\n    }\\n\"])));\nexport default function Notes() {\n  var _notes$, _newNote$content;\n\n  var _React$useContext = React.useContext(Context),\n      currentStep = _React$useContext.currentStep,\n      user = _React$useContext.user,\n      room = _React$useContext.room,\n      showNotes = _React$useContext.showNotes,\n      setShowNotes = _React$useContext.setShowNotes;\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      note = _React$useState2[0],\n      setNote = _React$useState2[1];\n\n  var textareaRef = React.useRef(null); // This hook is used for all operations that relate to\n  // the creation (and edition) of a new note. As soon\n  // as the ADMIN starts typing in the \"Notes\" area, this\n  // will generate a new card of type NOTE.\n\n  var _useCardMutations = useCardMutations(\"NOTE\"),\n      newNote = _useCardMutations.newCard,\n      createNote = _useCardMutations.createCard,\n      editNote = _useCardMutations.editCard; // Here, we fetch the notes for the PARTICIPANT users,\n  // because they will not get the updates through the\n  // card mutations, as only the ADMIN can write notes.\n  // Once again, it uses the same logic as cards.\n\n\n  var _useCardsList = useCardsList(\"NOTE\"),\n      notes = _useCardsList.cards,\n      loading = _useCardsList.loading;\n\n  React.useEffect(function () {\n    if (notes === null || notes === void 0 ? void 0 : notes.length) {\n      var _notes$0$content;\n\n      setNote((_notes$0$content = notes[0].content) !== null && _notes$0$content !== void 0 ? _notes$0$content : null);\n    }\n  }, [notes]); // Finally, we subscribe to updates to the notes. This\n  // way, all participants will receive real-time updates\n  // as the ADMIN types.\n\n  var _useSubscription = useSubscription(NOTE_UPDATED_SUBSCRIPTION, {\n    variables: {\n      id: notes === null || notes === void 0 ? void 0 : (_notes$ = notes[0]) === null || _notes$ === void 0 ? void 0 : _notes$.id\n    },\n    skip: !notes\n  }),\n      cardUpdatedData = _useSubscription.data;\n\n  React.useEffect(function () {\n    if (cardUpdatedData === null || cardUpdatedData === void 0 ? void 0 : cardUpdatedData.cardUpdated) {\n      // If this is the first note update, we'll open\n      // the Notes section for all users to see.\n      if (!note && !showNotes) {\n        setShowNotes(true);\n      }\n\n      setNote(cardUpdatedData.cardUpdated.content);\n    }\n  }, [cardUpdatedData]);\n\n  var handleChange = function handleChange(ev) {\n    var value = ev.target.value;\n\n    if (value.includes(\"*\")) {\n      // If we find a * character, we modify some instances\n      // into bullet points, just like in markdown.\n      editNote(value.split(/^[*][\\s]/).join(\"• \").split(/[\\n][*][\\s]/).join(\"\\n• \"));\n    } else {\n      editNote(value);\n    }\n  };\n\n  if (currentStep === Steps.WAIT) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"column notes \".concat(showNotes ? \"\" : \"hide\", \" \").concat(showNotes === null ? \"stale\" : \"\").trim(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    lessPadding: true,\n    width: \"90%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, \"Notes\"), (user === null || user === void 0 ? void 0 : user.role) === UserRole.ADMIN && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Textarea, {\n    ref: textareaRef,\n    value: (_newNote$content = newNote === null || newNote === void 0 ? void 0 : newNote.content) !== null && _newNote$content !== void 0 ? _newNote$content : \"\",\n    handleChange: handleChange,\n    handleFocus: createNote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 25\n    }\n  }), !newNote && /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: \"hsl(0, 0%, 82%, 52%)\",\n      fontSize: \"13px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 29\n    }\n  }, \"Only you can enter notes, but all participants will be able to see what you type.\")), (user === null || user === void 0 ? void 0 : user.role) === UserRole.PARTICIPANT && (loading || !notes ? null : (note === null || note === void 0 ? void 0 : note.length) ? /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      whiteSpace: \"pre-line\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 33\n    }\n  }, note) : /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: \"hsl(0, 0%, 82%, 62%)\",\n      fontSize: \"15px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 33\n    }\n  }, (room === null || room === void 0 ? void 0 : room.done) ? \"No notes were taken during this session.\" : \"There are no notes for now. This section will display notes as soon as the moderator starts typing.\"))));\n}","map":{"version":3,"sources":["/Users/cognizanttechnologysolutions/Downloads/retro-main/src/Room/Notes/Notes.tsx"],"names":["React","gql","Context","UserRole","useSubscription","useCardMutations","useCardsList","Card","Textarea","Steps","NOTE_UPDATED_SUBSCRIPTION","Notes","useContext","currentStep","user","room","showNotes","setShowNotes","useState","note","setNote","textareaRef","useRef","newNote","newCard","createNote","createCard","editNote","editCard","notes","cards","loading","useEffect","length","content","variables","id","skip","cardUpdatedData","data","cardUpdated","handleChange","ev","value","target","includes","split","join","WAIT","trim","role","ADMIN","color","fontSize","PARTICIPANT","whiteSpace","done"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,OAAT,QAAwB,eAAxB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,OAAO,aAAP;AAEA,IAAMC,yBAAyB,GAAGT,GAAH,8LAA/B;AAQA,eAAe,SAASU,KAAT,GAAiB;AAAA;;AAC5B,0BAA6DX,KAAK,CAACY,UAAN,CAAiBV,OAAjB,CAA7D;AAAA,MAAQW,WAAR,qBAAQA,WAAR;AAAA,MAAqBC,IAArB,qBAAqBA,IAArB;AAAA,MAA2BC,IAA3B,qBAA2BA,IAA3B;AAAA,MAAiCC,SAAjC,qBAAiCA,SAAjC;AAAA,MAA4CC,YAA5C,qBAA4CA,YAA5C;;AAEA,wBAAwBjB,KAAK,CAACkB,QAAN,CAA8B,IAA9B,CAAxB;AAAA;AAAA,MAAOC,IAAP;AAAA,MAAaC,OAAb;;AAEA,MAAMC,WAAW,GAAGrB,KAAK,CAACsB,MAAN,CAAyC,IAAzC,CAApB,CAL4B,CAO5B;AACA;AACA;AACA;;AACA,0BAEIjB,gBAAgB,CAAC,MAAD,CAFpB;AAAA,MACakB,OADb,qBACIC,OADJ;AAAA,MACkCC,UADlC,qBACsBC,UADtB;AAAA,MACwDC,QADxD,qBAC8CC,QAD9C,CAX4B,CAe5B;AACA;AACA;AACA;;;AACA,sBAAkCtB,YAAY,CAAC,MAAD,CAA9C;AAAA,MAAeuB,KAAf,iBAAQC,KAAR;AAAA,MAAsBC,OAAtB,iBAAsBA,OAAtB;;AAEA/B,EAAAA,KAAK,CAACgC,SAAN,CAAgB,YAAM;AAClB,QAAIH,KAAJ,aAAIA,KAAJ,uBAAIA,KAAK,CAAEI,MAAX,EAAmB;AAAA;;AACfb,MAAAA,OAAO,qBAACS,KAAK,CAAC,CAAD,CAAL,CAASK,OAAV,+DAAqB,IAArB,CAAP;AACH;AACJ,GAJD,EAIG,CAACL,KAAD,CAJH,EArB4B,CA2B5B;AACA;AACA;;AACA,yBAAkCzB,eAAe,CAACM,yBAAD,EAA4B;AAAEyB,IAAAA,SAAS,EAAE;AAAEC,MAAAA,EAAE,EAAEP,KAAF,aAAEA,KAAF,kCAAEA,KAAK,CAAG,CAAH,CAAP,4CAAE,QAAYO;AAAlB,KAAb;AAAqCC,IAAAA,IAAI,EAAE,CAACR;AAA5C,GAA5B,CAAjD;AAAA,MAAcS,eAAd,oBAAQC,IAAR;;AAEAvC,EAAAA,KAAK,CAACgC,SAAN,CAAgB,YAAM;AAClB,QAAIM,eAAJ,aAAIA,eAAJ,uBAAIA,eAAe,CAAEE,WAArB,EAAkC;AAC9B;AACA;AACA,UAAI,CAACrB,IAAD,IAAS,CAACH,SAAd,EAAyB;AACrBC,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACH;;AACDG,MAAAA,OAAO,CAACkB,eAAe,CAACE,WAAhB,CAA4BN,OAA7B,CAAP;AACH;AACJ,GATD,EASG,CAACI,eAAD,CATH;;AAWA,MAAMG,YAAY,GAAG,SAAfA,YAAe,CAACC,EAAD,EAAgD;AACjE,QAAQC,KAAR,GAAkBD,EAAE,CAACE,MAArB,CAAQD,KAAR;;AACA,QAAIA,KAAK,CAACE,QAAN,CAAe,GAAf,CAAJ,EAAyB;AACrB;AACA;AACAlB,MAAAA,QAAQ,CAACgB,KAAK,CAACG,KAAN,CAAY,UAAZ,EAAwBC,IAAxB,CAA6B,IAA7B,EAAmCD,KAAnC,CAAyC,aAAzC,EAAwDC,IAAxD,CAA6D,MAA7D,CAAD,CAAR;AACH,KAJD,MAIO;AACHpB,MAAAA,QAAQ,CAACgB,KAAD,CAAR;AACH;AACJ,GATD;;AAWA,MAAI9B,WAAW,KAAKJ,KAAK,CAACuC,IAA1B,EAAgC;AAC5B,WAAO,IAAP;AACH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAE,uBAAgBhC,SAAS,GAAG,EAAH,GAAQ,MAAjC,cAA2CA,SAAS,KAAK,IAAd,GAAqB,OAArB,GAA+B,EAA1E,EAA+EiC,IAA/E,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD;AAAM,IAAA,WAAW,MAAjB;AAAkB,IAAA,KAAK,EAAC,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,EAIK,CAAAnC,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEoC,IAAN,MAAe/C,QAAQ,CAACgD,KAAxB,iBACG,uDACI,oBAAC,QAAD;AACI,IAAA,GAAG,EAAE9B,WADT;AAEI,IAAA,KAAK,sBAAEE,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEW,OAAX,+DAAsB,EAF/B;AAGI,IAAA,YAAY,EAAEO,YAHlB;AAII,IAAA,WAAW,EAAEhB,UAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAOK,CAACF,OAAD,iBACG;AAAM,IAAA,KAAK,EAAE;AAAE6B,MAAAA,KAAK,EAAE,sBAAT;AAAiCC,MAAAA,QAAQ,EAAE;AAA3C,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yFARR,CALR,EAoBK,CAAAvC,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEoC,IAAN,MAAe/C,QAAQ,CAACmD,WAAxB,KACGvB,OAAO,IAAI,CAACF,KAAZ,GAAoB,IAApB,GACI,CAAAV,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEc,MAAN,iBAEQ;AAAM,IAAA,KAAK,EAAE;AAAEsB,MAAAA,UAAU,EAAE;AAAd,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKpC,IADL,CAFR,gBAMQ;AAAM,IAAA,KAAK,EAAE;AAAEiC,MAAAA,KAAK,EAAE,sBAAT;AAAiCC,MAAAA,QAAQ,EAAE;AAA3C,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,CAAAtC,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEyC,IAAN,IACK,0CADL,GAEK,qGAHV,CARf,CApBL,CADJ,CADJ;AAyCH","sourcesContent":["import * as React from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { Context } from \"../../Context\";\nimport { UserRole } from \"../../UserType\";\nimport { useSubscription } from \"@apollo/react-hooks\";\nimport useCardMutations from \"../useCardMutations\";\nimport useCardsList from \"../useCardsList\";\nimport Card from \"../../_lib/Card\";\nimport Textarea from \"../../_lib/Textarea\";\nimport Steps from \"../../Steps\";\n\nimport \"./Notes.css\";\n\nconst NOTE_UPDATED_SUBSCRIPTION = gql`\n    subscription onCardUpdated($id: String!) {\n        cardUpdated(id: $id) {\n            content\n        }\n    }\n`;\n\nexport default function Notes() {\n    const { currentStep, user, room, showNotes, setShowNotes } = React.useContext(Context);\n\n    const [note, setNote] = React.useState<string | null>(null);\n\n    const textareaRef = React.useRef<HTMLTextAreaElement | null>(null);\n\n    // This hook is used for all operations that relate to\n    // the creation (and edition) of a new note. As soon\n    // as the ADMIN starts typing in the \"Notes\" area, this\n    // will generate a new card of type NOTE.\n    const {\n        newCard: newNote, createCard: createNote, editCard: editNote\n    } = useCardMutations(\"NOTE\");\n\n    // Here, we fetch the notes for the PARTICIPANT users,\n    // because they will not get the updates through the\n    // card mutations, as only the ADMIN can write notes.\n    // Once again, it uses the same logic as cards.\n    const { cards: notes, loading } = useCardsList(\"NOTE\");\n\n    React.useEffect(() => {\n        if (notes?.length) {\n            setNote(notes[0].content ?? null);\n        }\n    }, [notes]);\n\n    // Finally, we subscribe to updates to the notes. This\n    // way, all participants will receive real-time updates\n    // as the ADMIN types.\n    const { data: cardUpdatedData } = useSubscription(NOTE_UPDATED_SUBSCRIPTION, { variables: { id: notes?.[0]?.id }, skip: !notes });\n\n    React.useEffect(() => {\n        if (cardUpdatedData?.cardUpdated) {\n            // If this is the first note update, we'll open\n            // the Notes section for all users to see.\n            if (!note && !showNotes) {\n                setShowNotes(true);\n            }\n            setNote(cardUpdatedData.cardUpdated.content);\n        }\n    }, [cardUpdatedData]);\n\n    const handleChange = (ev: React.ChangeEvent<HTMLTextAreaElement>) => {\n        const { value } = ev.target;\n        if (value.includes(\"*\")) {\n            // If we find a * character, we modify some instances\n            // into bullet points, just like in markdown.\n            editNote(value.split(/^[*][\\s]/).join(\"• \").split(/[\\n][*][\\s]/).join(\"\\n• \"));\n        } else {\n            editNote(value);\n        }\n    };\n\n    if (currentStep === Steps.WAIT) {\n        return null;\n    }\n\n    return (\n        <div className={`column notes ${showNotes ? \"\" : \"hide\"} ${showNotes === null ? \"stale\" : \"\"}`.trim()}>\n            <Card lessPadding width=\"90%\">\n                <div className=\"card-title\">\n                    Notes\n                </div>\n                {user?.role === UserRole.ADMIN && (\n                    <>\n                        <Textarea\n                            ref={textareaRef}\n                            value={newNote?.content ?? \"\"}\n                            handleChange={handleChange}\n                            handleFocus={createNote}\n                        />\n                        {!newNote && (\n                            <span style={{ color: \"hsl(0, 0%, 82%, 52%)\", fontSize: \"13px\" }}>\n                                Only you can enter notes, but all participants will be\n                                able to see what you type.\n                            </span>\n                        )}\n                    </>\n                )}\n                {user?.role === UserRole.PARTICIPANT && (\n                    loading || !notes ? null : (\n                        note?.length\n                            ? (\n                                <span style={{ whiteSpace: \"pre-line\" }}>\n                                    {note}\n                                </span>\n                            ) : (\n                                <span style={{ color: \"hsl(0, 0%, 82%, 62%)\", fontSize: \"15px\" }}>\n                                    {room?.done\n                                        ? \"No notes were taken during this session.\"\n                                        : \"There are no notes for now. This section will display notes as soon as the moderator starts typing.\"}\n                                </span>\n                            )\n                    )\n                )}\n            </Card>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}