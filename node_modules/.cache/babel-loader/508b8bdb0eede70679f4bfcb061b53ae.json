{"ast":null,"code":"import _objectSpread from \"/Users/cognizanttechnologysolutions/Downloads/retro-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/cognizanttechnologysolutions/Downloads/retro-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/cognizanttechnologysolutions/Downloads/retro-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _templateObject,\n    _jsxFileName = \"/Users/cognizanttechnologysolutions/Downloads/retro-main/src/Router.tsx\";\n\nimport * as React from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { useLazyQuery } from \"@apollo/react-hooks\";\nimport Steps from \"./Steps\";\nimport JoinRoom from \"./Login/JoinRoom\";\nimport Login from \"./Login/Login\";\nimport Users from \"./Header/Users\";\nimport Title from \"./Header/Title\";\nimport Room from \"./Room/Room\";\nimport Footer from \"./Footer/Footer\";\nvar GET_ROOM = gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n    query getRoom($id: String!) {\\n        room(id: $id) {\\n            id\\n            step\\n            createdAt\\n            done\\n        }\\n    }\\n\"])));\n/**\n * This Router is a bit rudimentary because we don't\n * really expect to have a lot of \"pages\" for now. So it's\n * mostly a bunch of booleans that we toggle and we display\n * different components based on their state.\n *\n * It's also here that we find the Room URL logic.\n */\n\nexport default function Router(props) {\n  var room = props.room,\n      setRoom = props.setRoom,\n      user = props.user,\n      setUser = props.setUser;\n\n  var _useLazyQuery = useLazyQuery(GET_ROOM),\n      _useLazyQuery2 = _slicedToArray(_useLazyQuery, 2),\n      getRoom = _useLazyQuery2[0],\n      _useLazyQuery2$ = _useLazyQuery2[1],\n      getRoomData = _useLazyQuery2$.data,\n      loading = _useLazyQuery2$.loading; // We set this to `true` if the room URL or the\n  // room code entered by the user does not exist\n\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      hasError = _React$useState2[0],\n      setHasError = _React$useState2[1];\n\n  React.useEffect(function () {\n    if (window.location.pathname !== \"/\") {\n      getRoom({\n        variables: {\n          id: window.location.pathname.substr(1)\n        }\n      });\n    }\n  }, [getRoom]);\n  React.useEffect(function () {\n    if (room) {\n      window.history.pushState(null, \"\", \"/\".concat(room.id));\n    }\n  }, [room]);\n  React.useEffect(function () {\n    if (getRoomData && !room) {\n      if (getRoomData.room) {\n        // If the room is archived, we consider that we're at the last step,\n        // regardless of where the meeting was at when it ended\n        var step = getRoomData.room.done ? Steps.REVEAL : getRoomData.room.step;\n        setRoom(_objectSpread(_objectSpread({}, getRoomData.room), {}, {\n          step: step\n        }));\n      } else {\n        setHasError(true);\n      }\n    }\n  }, [getRoomData, setRoom, setHasError, room]);\n\n  if (loading) {\n    return null;\n  }\n\n  if (!room) {\n    return /*#__PURE__*/React.createElement(JoinRoom, {\n      setRoom: setRoom,\n      getRoom: getRoom,\n      hasError: hasError,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 16\n      }\n    });\n  }\n\n  if (!user) {\n    return /*#__PURE__*/React.createElement(Login, {\n      setUser: setUser,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 16\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Users, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Room, {\n    categories: [\"MAD\", \"SAD\", \"GLAD\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/cognizanttechnologysolutions/Downloads/retro-main/src/Router.tsx"],"names":["React","gql","useLazyQuery","Steps","JoinRoom","Login","Users","Title","Room","Footer","GET_ROOM","Router","props","room","setRoom","user","setUser","getRoom","getRoomData","data","loading","useState","hasError","setHasError","useEffect","window","location","pathname","variables","id","substr","history","pushState","step","done","REVEAL"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { useLazyQuery } from \"@apollo/react-hooks\";\nimport RoomType from \"./Room/RoomType\";\nimport UserType from \"./UserType\";\nimport Steps from \"./Steps\";\nimport JoinRoom from \"./Login/JoinRoom\";\nimport Login from \"./Login/Login\";\nimport Users from \"./Header/Users\";\nimport Title from \"./Header/Title\";\nimport Room from \"./Room/Room\";\nimport Footer from \"./Footer/Footer\";\n\ntype RouterProps = {\n    room: RoomType | null\n    setRoom: (room: RoomType) => void\n    user: UserType | null\n    setUser: (user: UserType) => void\n};\n\nconst GET_ROOM = gql`\n    query getRoom($id: String!) {\n        room(id: $id) {\n            id\n            step\n            createdAt\n            done\n        }\n    }\n`;\n\n/**\n * This Router is a bit rudimentary because we don't\n * really expect to have a lot of \"pages\" for now. So it's\n * mostly a bunch of booleans that we toggle and we display\n * different components based on their state.\n *\n * It's also here that we find the Room URL logic.\n */\nexport default function Router(props: RouterProps) {\n    const {\n        room, setRoom, user, setUser\n    } = props;\n\n    const [getRoom, { data: getRoomData, loading }] = useLazyQuery(GET_ROOM);\n\n    // We set this to `true` if the room URL or the\n    // room code entered by the user does not exist\n    const [hasError, setHasError] = React.useState(false);\n\n    React.useEffect(() => {\n        if (window.location.pathname !== \"/\") {\n            getRoom({ variables: { id: window.location.pathname.substr(1) } });\n        }\n    }, [getRoom]);\n\n    React.useEffect(() => {\n        if (room) {\n            window.history.pushState(null, \"\", `/${room.id}`);\n        }\n    }, [room]);\n\n    React.useEffect(() => {\n        if (getRoomData && !room) {\n            if (getRoomData.room) {\n                // If the room is archived, we consider that we're at the last step,\n                // regardless of where the meeting was at when it ended\n                const step = getRoomData.room.done ? Steps.REVEAL : getRoomData.room.step;\n                setRoom({ ...getRoomData.room, step });\n            } else {\n                setHasError(true);\n            }\n        }\n    }, [getRoomData, setRoom, setHasError, room]);\n\n    if (loading) {\n        return null;\n    }\n\n    if (!room) {\n        return <JoinRoom setRoom={setRoom} getRoom={getRoom} hasError={hasError} />;\n    }\n\n    if (!user) {\n        return <Login setUser={setUser} />;\n    }\n\n    return (\n        <>\n            <Users />\n            <Title />\n            <Room categories={[\"MAD\", \"SAD\", \"GLAD\"]} />\n            <Footer />\n        </>\n    );\n}"]},"metadata":{},"sourceType":"module"}